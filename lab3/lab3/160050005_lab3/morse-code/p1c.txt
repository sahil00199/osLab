As expected, when the granchild exits before the child (which in turn exits before the parent), 2 exit messages are displayed through the signal_handler function. However, the parent function exits once both the child and grandchild return (though there is a sleep in the parent body with a larger value). This was explained in the lab and occurs because the handler returns just after the sleep.
This output can be justified because the child process has not terminated (it is sleeping) when the grandchild exits and so the signal_handler function is invoked and the corresponding information is printed. After this, information about the exiting of the child is printed by the invocation of the signal_handler in the parent function.

When the child exits before the grandchild, the only message printed is by the parent when the child exits. This, too, is expected because by the time the grandchild exits the child has already terminated and hence the signal sent to the child does not lead to an invocation of the signal_handler function. The exiting of the child, however, leads to an invocation of the signal_handler in the parent and prints the corresponding output as stated before.